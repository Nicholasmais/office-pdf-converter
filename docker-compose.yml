services:
  postgres:
    image: postgres:17
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}      
    ports:
      - 5433:5432
    volumes:
      - ./backend/db/:/var/lib/postgresql/data
    restart: always
    networks:
      - mynetwork

  api:
    image: backend
    build:
      context: ./backend
      dockerfile: ./backend.dockerfile
    container_name: backend
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - RABBIT_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
    ports:
      - 3000:3000
    volumes:
      - ./backend/:/app/
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - mynetwork

  rabbitmqConsumer:
    image: rabbitmq-consumer
    build:
      context: ./backend
      dockerfile: ./rabbitmq.dockerfile
    container_name: rabbitmq-consumer
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - RABBIT_URL=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672
    ports:
      - 3002:3000
    volumes:
      - ./backend/:/app/
    restart: always
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - mynetwork

  converter:
    image: converter
    build:
      context: ./office-converter
      dockerfile: ./converter.dockerfile
    container_name: converter
    ports: 
      - 8000:8000
    env_file:
      - .env
    volumes:
      - ./office-converter/:/app/
    restart: always
    depends_on:
      - api
    networks:
      - mynetwork

  frontend:
    image: frontend
    build:
      context: ./frontend
      dockerfile: ./frontend.dockerfile
    container_name: frontend
    ports:
      - 3001:3001
    volumes:
      - ./frontend/:/app/
    restart: always
    depends_on:
      - api
    networks:
      - mynetwork

  redis:
    image: redis:7
    container_name: redis
    ports:
      - 6379:6379    
    restart: always   
    networks:
      - mynetwork

  rabbitmq:
    image: rabbitmq:4.0-management
    container_name: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - ./backend/rabbitmq/:/var/lib/rabbitmq
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge